import sys

def decode(line, code, lineNum, FUNC, relation):
    left_side = ""
    right_side = ""
    line = line.strip("+")
    line = line.strip("\n")
    if (">" or "<" or "<=" or ">=" in line) :
        if ("> " in line) :                
            relation = ">"
            lineNum = simplify(line, code, lineNum, relation)
            return lineNum, relation
        
        elif "< " in line :                
            relation = "<"
            lineNum = simplify(line, code, lineNum, relation)
            return lineNum, relation
        
        elif "<=" in line :
            relation = "<="
            lineNum = simplify(line, code, lineNum, relation)
            return lineNum, relation
        
        elif ">=" in line :
            relation = ">="
            lineNum = simplify(line, code, lineNum, relation)
            return lineNum, relation
    
    code[lineNum] = "\tget_"+FUNC+"_invariants(left_side, right_side);\n"
    return lineNum, relation # TODO: relation

def simplify(line, code, lineNum, relation) :
    left_side, right_side = line.split(relation)
    left_side = left_side.strip("\t")
    left_side = left_side.lstrip("if")
    left_side = left_side.lstrip(" ")
    left_side = left_side.rstrip(" ")
    left_side = "\tint left_side = "+left_side+";"
    right_side = right_side.lstrip(" ")
    right_side = "\tint right_side = "+right_side+";"
            
    code[lineNum] = left_side+"\n"
    lineNum += 1
    code[lineNum] = right_side+"\n"
    lineNum += 1
    
    return lineNum

def insert_dummy_code(code) :
    for k in code:
        with open(sys.argv[2], "r") as f_out:
            contents = f_out.readlines()
        contents.insert(k, code[k])
        with open(sys.argv[2], "w") as f_out:
            contents = "".join(contents)
            f_out.write(contents)
            
def insert_dummy_func(FUNC) :
    lineNum = 0
    target = " "+FUNC+"("
    with open(sys.argv[2], "r") as f_out:
        contents = f_out.readlines()
        for line in contents:
            if target in line:
                contents.insert(lineNum, "void get_"+FUNC+"_invariants (int left_side, int right_side) {}\n\n")
                break
            lineNum += 1
        with open(sys.argv[2], "w") as f_out:
            contents = "".join(contents)
            f_out.write(contents)
            
def insert_daikon_inv(relation):
    lineNum = 0
    target = "get_foo_invariants"
    found = 0
    invariant = ""
    with open(sys.argv[3], "r") as f_out:
        contents = f_out.readlines()
        for line in contents:
            if target in line:
                found = 1
            if found and " == " in line:
                if "left_side" in line:
                    left_side = line.split(" == ")[0]
                if "right_side" in line:
                    right_side = line.split(" == ")[0]
            if found and "=========================" in line: 
                invariant = left_side+" "+relation+" "+right_side+"\n"
                contents.insert(lineNum, invariant)
                found = 0
            lineNum += 1

    with open("daikon.txt", "w") as f_out:
        contents = "".join(contents)
        f_out.write(contents)

            
def main():
    if len(sys.argv) < 4 :
        print("Usage:", sys.argv[0], "patch_file.bc.patch target_file.c daikon.txt")
        return
    f_in = open(sys.argv[1], "r")
    in_Lines = f_in.readlines()
    code = {}
    lineNum = 1
    relation = ""
    for line in in_Lines:
        if line.startswith("File") :
            FILE = line.split(" ")[1]
            FILE = FILE.strip("\n")
        elif line.startswith("Function") :
            FUNC = line.split(" ")[1]
            FUNC = FUNC.strip("\n")
        elif line.startswith("Line") :
            LINE = line.split(" ")[1]
            LINE = LINE.strip("\n")
            lineNum = int(LINE)
        elif line.startswith("+") :
            lineNum, relation = decode(line, code, lineNum, FUNC, relation)

    insert_dummy_func(FUNC)
    insert_dummy_code(code)
    insert_daikon_inv(relation)
    
if __name__ == "__main__":
    main()
